[
    {
        "id": "f0a5962abdbfcd86",
        "type": "tab",
        "label": "Fluxo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "mosq-broker",
        "type": "mqtt-broker",
        "name": "Local Mosquitto",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "nodered-consumer",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "9cff62fae3147db5",
        "type": "mqtt in",
        "z": "f0a5962abdbfcd86",
        "name": "Telemetry in",
        "topic": "lab/bench/+/telemetry",
        "qos": "0",
        "datatype": "auto",
        "broker": "mosq-broker",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 180,
        "wires": [
            [
                "8772e5b783cbf877"
            ]
        ]
    },
    {
        "id": "8772e5b783cbf877",
        "type": "json",
        "z": "f0a5962abdbfcd86",
        "name": "Parse JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "a997ba47d5fd282e"
            ]
        ]
    },
    {
        "id": "a997ba47d5fd282e",
        "type": "function",
        "z": "f0a5962abdbfcd86",
        "name": "To Influx Line Protocol",
        "func": "var p = msg.payload || {};\nvar bench = p.bench_id || 'unknown';\nfunction f(v){ return (v===undefined||v===null)?null:v; }\n// Build fields (only include if present)\nvar fields = [];\nif(f(p.temp)!=null) fields.push('temp='+p.temp);\nif(f(p.hum)!=null) fields.push('hum='+p.hum);\nif(f(p.lux)!=null) fields.push('lux='+p.lux);\nif(f(p.noise_db)!=null) fields.push('noise_db='+p.noise_db);\nif(f(p.co2)!=null) fields.push('co2='+p.co2+'i');\nif(f(p.voc)!=null) fields.push('voc='+p.voc+'i');\nif(f(p.pm25)!=null) fields.push('pm25='+p.pm25+'i');\nif(f(p.pm10)!=null) fields.push('pm10='+p.pm10+'i');\nvar measurement = 'bench_env';\nvar line = measurement + ',bench_id=' + bench + ' ' + fields.join(',');\nmsg.headers = {'Content-Type':'text/plain'};\nmsg.payload = line;\nmsg.method = 'POST';\nmsg.url = 'http://influxdb:8086/write?db=iot';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "666c8d3fa22f1ed7",
                "81e434bb2196f8d0"
            ]
        ]
    },
    {
        "id": "666c8d3fa22f1ed7",
        "type": "http request",
        "z": "f0a5962abdbfcd86",
        "name": "InfluxDB write",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 790,
        "y": 180,
        "wires": [
            [
                "4dd9d749ecade47e"
            ]
        ]
    },
    {
        "id": "81e434bb2196f8d0",
        "type": "debug",
        "z": "f0a5962abdbfcd86",
        "name": "Line protocol",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 770,
        "y": 240,
        "wires": []
    },
    {
        "id": "4dd9d749ecade47e",
        "type": "debug",
        "z": "f0a5962abdbfcd86",
        "name": "Write status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "statusCode",
        "targetType": "msg",
        "x": 990,
        "y": 180,
        "wires": []
    }
]