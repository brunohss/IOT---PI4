[
  {
    "id": "mqtt_in",
    "type": "mqtt in",
    "z": "flow1",
    "name": "Telemetry in",
    "topic": "lab/bench/+/telemetry",
    "qos": "0",
    "datatype": "auto",
    "broker": "mosq-broker",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 180,
    "y": 120,
    "wires": [
      [
        "json_parse"
      ]
    ]
  },
  {
    "id": "json_parse",
    "type": "json",
    "z": "flow1",
    "name": "Parse JSON",
    "property": "payload",
    "action": "",
    "pretty": false,
    "x": 380,
    "y": 120,
    "wires": [
      [
        "fn_line_protocol"
      ]
    ]
  },
  {
    "id": "fn_line_protocol",
    "type": "function",
    "z": "flow1",
    "name": "To Influx Line Protocol",
    "func": "var p = msg.payload || {};\nvar bench = p.bench_id || 'unknown';\nfunction f(v){ return (v===undefined||v===null)?null:v; }\n// Build fields (only include if present)\nvar fields = [];\nif(f(p.temp)!=null) fields.push('temp='+p.temp);\nif(f(p.hum)!=null) fields.push('hum='+p.hum);\nif(f(p.lux)!=null) fields.push('lux='+p.lux);\nif(f(p.noise_db)!=null) fields.push('noise_db='+p.noise_db);\nif(f(p.co2)!=null) fields.push('co2='+p.co2+'i');\nif(f(p.voc)!=null) fields.push('voc='+p.voc+'i');\nif(f(p.pm25)!=null) fields.push('pm25='+p.pm25+'i');\nif(f(p.pm10)!=null) fields.push('pm10='+p.pm10+'i');\nvar measurement = 'bench_env';\nvar line = measurement + ',bench_id=' + bench + ' ' + fields.join(',');\nmsg.headers = {'Content-Type':'text/plain'};\nmsg.payload = line;\nmsg.method = 'POST';\nmsg.url = 'http://influxdb:8086/write?db=iot';\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 620,
    "y": 120,
    "wires": [
      [
        "http_out",
        "debug"
      ]
    ]
  },
  {
    "id": "http_out",
    "type": "http request",
    "z": "flow1",
    "name": "InfluxDB write",
    "method": "use",
    "ret": "txt",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 860,
    "y": 120,
    "wires": [
      [
        "debug_status"
      ]
    ]
  },
  {
    "id": "debug",
    "type": "debug",
    "z": "flow1",
    "name": "Line protocol",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 840,
    "y": 180,
    "wires": []
  },
  {
    "id": "debug_status",
    "type": "debug",
    "z": "flow1",
    "name": "Write status",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "statusCode",
    "targetType": "msg",
    "x": 1060,
    "y": 120,
    "wires": []
  },
  {
    "id": "mosq-broker",
    "type": "mqtt-broker",
    "name": "Local Mosquitto",
    "broker": "mosquitto",
    "port": "1883",
    "clientid": "nodered-consumer",
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": ""
  }
]